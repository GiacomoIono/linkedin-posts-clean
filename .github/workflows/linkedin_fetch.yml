name: LinkedIn to X Full Pipeline
concurrency:
  group: linkedin-to-x-pipeline
  cancel-in-progress: true

on:
  schedule:
    # Every day at 7pm
    - cron:  '0 17 * * *'
  workflow_dispatch:    # enables manual run from the Actions tab

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: ‚§µÔ∏è Check out repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: pip install -r requirements.txt

      - name: üîê Set all required env vars
        env:
          LINKEDIN_ACCESS_TOKEN: ${{ secrets.LINKEDIN_ACCESS_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
        run: |
          echo "LINKEDIN_ACCESS_TOKEN=$LINKEDIN_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
          echo "X_API_KEY=$X_API_KEY" >> $GITHUB_ENV
          echo "X_API_SECRET=$X_API_SECRET" >> $GITHUB_ENV
          echo "X_ACCESS_TOKEN=$X_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "X_ACCESS_TOKEN_SECRET=$X_ACCESS_TOKEN_SECRET" >> $GITHUB_ENV

      - name: ‚ñ∂Ô∏è Run the entire pipeline
        run: python run_pipeline.py

      - name: üì§ Commit & push results if new post was found
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if the python scripts actually modified the files
          if git diff --quiet -- 'last_linkedin_post.json' 'last_linkedin_post.enriched.json' 'Twitter/tweet.json'; then
            echo "No new post or changes to commit."
            exit 0
          fi

          # 1. ADD AND COMMIT THE NEW FILES FIRST
          # This cleans the working directory so the next step can succeed.
          git add last_linkedin_post.json last_linkedin_post.enriched.json Twitter/tweet.json
          git commit -m "chore(bot): Update post files for $(date -u +'%Y-%m-%d')"

          # 2. PULL LATEST CHANGES FROM THE REMOTE REPO
          # --rebase will put your new commit on top of any other recent changes.
          git pull --rebase origin main

          # 3. PUSH YOUR NEW COMMIT
          # Now that everything is in sync, this will succeed.
          git push origin main